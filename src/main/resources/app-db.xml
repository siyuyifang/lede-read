<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <description>定义受环境影响易变的变量</description>

    <!--注意在启动环境的时候添加jvm启动参数，-Dspring.profiles.active=online或其他环境profile -->

    <!--db 配置注入-->
    <context:property-placeholder
            location="classpath:db.properties"
            order="1" ignore-unresolvable="true" ignore-resource-not-found="true"/>

    <!-- 数据库配置  若存在多数据源的配置，注意需要指定一个默认的主数据源，如:primary=true -->
    <bean id="dataSource" primary="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${common_mysql.driver-class-name}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${common_mysql.url}"/>
        <property name="username" value="${common_mysql.username}"/>
        <property name="password" value="${common_mysql.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${common_mysql.initialSize}"/>
        <property name="minIdle" value="${common_mysql.minIdle}"/>
        <property name="maxActive" value="${common_mysql.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${common_mysql.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${common_mysql.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${common_mysql.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <property name="testWhileIdle" value="true"/><!--缺省为false，建议配置为true，不影响性能，并且保证安全性-->
        <property name="testOnBorrow" value="false"/><!--缺省为true，申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle及mysql5.5以上使用） -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>

        <property name="connectionInitSqls" value="set names utf8mb4;"/>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" primary="true"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="sqlSessionFactory" primary="true" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="plugins">
            <array>
                <ref bean="paginationInterceptor"/>
                <ref bean="sqlTimeCostInterceptor"/>
            </array>
        </property>
    </bean>

    <!-- 数据源公共配置-->
    <!-- 配置MyBatis的分页 -->
    <bean id="paginationInterceptor" class="com.lede.blockchain.common.pagination.PaginationInterceptor">
        <property name="dialect">
            <bean class="com.lede.blockchain.common.pagination.dialect.MySQLDialect"/>
        </property>
        <property name="paginationSqlRegEx" value=".*ByCond"></property>
    </bean>
    <!-- 配置MyBatis的分页 end -->

    <!-- sql cost time begin -->
    <bean id="sqlTimeCostInterceptor" class="com.lede.blockchain.common.interceptor.SqlTimeCostInterceptor">
        <property name="thresholdInMs" value="${sqlTimeCost.thresholdInMs}"></property>
    </bean>
    <!-- sql cost time end -->
</beans>
